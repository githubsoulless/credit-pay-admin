<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.chrone.creditpay.mapper.PayProfitsDetailMapper">
  <resultMap id="BaseResultMap" type="net.chrone.creditpay.model.PayProfitsDetail">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="profits_id" jdbcType="VARCHAR" property="profitsId" />
    <result column="profits_dt" jdbcType="VARCHAR" property="profitsDt" />
    <result column="plan_id" jdbcType="VARCHAR" property="planId" />
    <result column="profits_num" jdbcType="INTEGER" property="profitsNum" />
    <result column="profits_user_id" jdbcType="VARCHAR" property="profitsUserId" />
    <result column="profits_user_name" jdbcType="VARCHAR" property="profitsUserName" />
    <result column="agent_id" jdbcType="VARCHAR" property="agentId" />
    <result column="agent_name" jdbcType="VARCHAR" property="agentName" />
    <result column="amount" jdbcType="INTEGER" property="amount" />
    <result column="row_crt_usr" jdbcType="VARCHAR" property="rowCrtUsr" />
    <result column="row_crt_ts" jdbcType="TIMESTAMP" property="rowCrtTs" />
    <result column="rec_upd_usr" jdbcType="VARCHAR" property="recUpdUsr" />
    <result column="rec_upd_ts" jdbcType="TIMESTAMP" property="recUpdTs" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    id, profits_id, profits_dt, plan_id, profits_num, profits_user_id, profits_user_name, 
    agent_id, agent_name, amount, row_crt_usr, row_crt_ts, rec_upd_usr, rec_upd_ts
  </sql>
  <select id="selectByExample" parameterType="net.chrone.creditpay.model.PayProfitsDetailExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_pay_profits_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    select 
    <include refid="Base_Column_List" />
    from t_pay_profits_detail
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    delete from t_pay_profits_detail
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="net.chrone.creditpay.model.PayProfitsDetailExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    delete from t_pay_profits_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.chrone.creditpay.model.PayProfitsDetail">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    insert into t_pay_profits_detail (id, profits_id, profits_dt, 
      plan_id, profits_num, profits_user_id, 
      profits_user_name, agent_id, agent_name, 
      amount, row_crt_usr, row_crt_ts, 
      rec_upd_usr, rec_upd_ts)
    values (#{id,jdbcType=VARCHAR}, #{profitsId,jdbcType=VARCHAR}, #{profitsDt,jdbcType=VARCHAR}, 
      #{planId,jdbcType=VARCHAR}, #{profitsNum,jdbcType=INTEGER}, #{profitsUserId,jdbcType=VARCHAR}, 
      #{profitsUserName,jdbcType=VARCHAR}, #{agentId,jdbcType=VARCHAR}, #{agentName,jdbcType=VARCHAR}, 
      #{amount,jdbcType=INTEGER}, #{rowCrtUsr,jdbcType=VARCHAR}, #{rowCrtTs,jdbcType=TIMESTAMP}, 
      #{recUpdUsr,jdbcType=VARCHAR}, #{recUpdTs,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="net.chrone.creditpay.model.PayProfitsDetail">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    insert into t_pay_profits_detail
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="profitsId != null">
        profits_id,
      </if>
      <if test="profitsDt != null">
        profits_dt,
      </if>
      <if test="planId != null">
        plan_id,
      </if>
      <if test="profitsNum != null">
        profits_num,
      </if>
      <if test="profitsUserId != null">
        profits_user_id,
      </if>
      <if test="profitsUserName != null">
        profits_user_name,
      </if>
      <if test="agentId != null">
        agent_id,
      </if>
      <if test="agentName != null">
        agent_name,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="rowCrtUsr != null">
        row_crt_usr,
      </if>
      <if test="rowCrtTs != null">
        row_crt_ts,
      </if>
      <if test="recUpdUsr != null">
        rec_upd_usr,
      </if>
      <if test="recUpdTs != null">
        rec_upd_ts,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="profitsId != null">
        #{profitsId,jdbcType=VARCHAR},
      </if>
      <if test="profitsDt != null">
        #{profitsDt,jdbcType=VARCHAR},
      </if>
      <if test="planId != null">
        #{planId,jdbcType=VARCHAR},
      </if>
      <if test="profitsNum != null">
        #{profitsNum,jdbcType=INTEGER},
      </if>
      <if test="profitsUserId != null">
        #{profitsUserId,jdbcType=VARCHAR},
      </if>
      <if test="profitsUserName != null">
        #{profitsUserName,jdbcType=VARCHAR},
      </if>
      <if test="agentId != null">
        #{agentId,jdbcType=VARCHAR},
      </if>
      <if test="agentName != null">
        #{agentName,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="rowCrtUsr != null">
        #{rowCrtUsr,jdbcType=VARCHAR},
      </if>
      <if test="rowCrtTs != null">
        #{rowCrtTs,jdbcType=TIMESTAMP},
      </if>
      <if test="recUpdUsr != null">
        #{recUpdUsr,jdbcType=VARCHAR},
      </if>
      <if test="recUpdTs != null">
        #{recUpdTs,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="net.chrone.creditpay.model.PayProfitsDetailExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    select count(*) from t_pay_profits_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    update t_pay_profits_detail
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.profitsId != null">
        profits_id = #{record.profitsId,jdbcType=VARCHAR},
      </if>
      <if test="record.profitsDt != null">
        profits_dt = #{record.profitsDt,jdbcType=VARCHAR},
      </if>
      <if test="record.planId != null">
        plan_id = #{record.planId,jdbcType=VARCHAR},
      </if>
      <if test="record.profitsNum != null">
        profits_num = #{record.profitsNum,jdbcType=INTEGER},
      </if>
      <if test="record.profitsUserId != null">
        profits_user_id = #{record.profitsUserId,jdbcType=VARCHAR},
      </if>
      <if test="record.profitsUserName != null">
        profits_user_name = #{record.profitsUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.agentId != null">
        agent_id = #{record.agentId,jdbcType=VARCHAR},
      </if>
      <if test="record.agentName != null">
        agent_name = #{record.agentName,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=INTEGER},
      </if>
      <if test="record.rowCrtUsr != null">
        row_crt_usr = #{record.rowCrtUsr,jdbcType=VARCHAR},
      </if>
      <if test="record.rowCrtTs != null">
        row_crt_ts = #{record.rowCrtTs,jdbcType=TIMESTAMP},
      </if>
      <if test="record.recUpdUsr != null">
        rec_upd_usr = #{record.recUpdUsr,jdbcType=VARCHAR},
      </if>
      <if test="record.recUpdTs != null">
        rec_upd_ts = #{record.recUpdTs,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    update t_pay_profits_detail
    set id = #{record.id,jdbcType=VARCHAR},
      profits_id = #{record.profitsId,jdbcType=VARCHAR},
      profits_dt = #{record.profitsDt,jdbcType=VARCHAR},
      plan_id = #{record.planId,jdbcType=VARCHAR},
      profits_num = #{record.profitsNum,jdbcType=INTEGER},
      profits_user_id = #{record.profitsUserId,jdbcType=VARCHAR},
      profits_user_name = #{record.profitsUserName,jdbcType=VARCHAR},
      agent_id = #{record.agentId,jdbcType=VARCHAR},
      agent_name = #{record.agentName,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=INTEGER},
      row_crt_usr = #{record.rowCrtUsr,jdbcType=VARCHAR},
      row_crt_ts = #{record.rowCrtTs,jdbcType=TIMESTAMP},
      rec_upd_usr = #{record.recUpdUsr,jdbcType=VARCHAR},
      rec_upd_ts = #{record.recUpdTs,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="net.chrone.creditpay.model.PayProfitsDetail">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    update t_pay_profits_detail
    <set>
      <if test="profitsId != null">
        profits_id = #{profitsId,jdbcType=VARCHAR},
      </if>
      <if test="profitsDt != null">
        profits_dt = #{profitsDt,jdbcType=VARCHAR},
      </if>
      <if test="planId != null">
        plan_id = #{planId,jdbcType=VARCHAR},
      </if>
      <if test="profitsNum != null">
        profits_num = #{profitsNum,jdbcType=INTEGER},
      </if>
      <if test="profitsUserId != null">
        profits_user_id = #{profitsUserId,jdbcType=VARCHAR},
      </if>
      <if test="profitsUserName != null">
        profits_user_name = #{profitsUserName,jdbcType=VARCHAR},
      </if>
      <if test="agentId != null">
        agent_id = #{agentId,jdbcType=VARCHAR},
      </if>
      <if test="agentName != null">
        agent_name = #{agentName,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=INTEGER},
      </if>
      <if test="rowCrtUsr != null">
        row_crt_usr = #{rowCrtUsr,jdbcType=VARCHAR},
      </if>
      <if test="rowCrtTs != null">
        row_crt_ts = #{rowCrtTs,jdbcType=TIMESTAMP},
      </if>
      <if test="recUpdUsr != null">
        rec_upd_usr = #{recUpdUsr,jdbcType=VARCHAR},
      </if>
      <if test="recUpdTs != null">
        rec_upd_ts = #{recUpdTs,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.chrone.creditpay.model.PayProfitsDetail">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 21 18:17:01 CST 2017.
    -->
    update t_pay_profits_detail
    set profits_id = #{profitsId,jdbcType=VARCHAR},
      profits_dt = #{profitsDt,jdbcType=VARCHAR},
      plan_id = #{planId,jdbcType=VARCHAR},
      profits_num = #{profitsNum,jdbcType=INTEGER},
      profits_user_id = #{profitsUserId,jdbcType=VARCHAR},
      profits_user_name = #{profitsUserName,jdbcType=VARCHAR},
      agent_id = #{agentId,jdbcType=VARCHAR},
      agent_name = #{agentName,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=INTEGER},
      row_crt_usr = #{rowCrtUsr,jdbcType=VARCHAR},
      row_crt_ts = #{rowCrtTs,jdbcType=TIMESTAMP},
      rec_upd_usr = #{recUpdUsr,jdbcType=VARCHAR},
      rec_upd_ts = #{recUpdTs,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>

	<resultMap extends="BaseResultMap" id="DetailResultMap" type="net.chrone.creditpay.model.PayProfitsDetail">
		<result column="level" jdbcType="INTEGER" property="level" />
		<result column="account_name" jdbcType="VARCHAR" property="accountName" />
	</resultMap>

	<select id="listPayProfitsDetail" parameterType="String" resultMap="DetailResultMap">
		select a.*,b.level,c.account_name as accountName from t_pay_profits_detail a
		left join t_agent_inf b on a.agent_id = b.agent_id
		left join t_app_user c on a.profits_user_id=c.user_id
		where profits_id = #{profitsId,jdbcType=VARCHAR}
		order by profits_num asc
	</select>


	<resultMap id="AgentProfitResultMap" type="net.chrone.creditpay.model.AgentProfitVO">
	    <result column="agent_id" jdbcType="VARCHAR" property="agentId" />
	    <result column="agent_name" jdbcType="VARCHAR" property="agentName" />
	    <result column="level" jdbcType="INTEGER" property="level" />
	    <result column="profits_type" jdbcType="INTEGER" property="profitsType" />
	    <result column="profits_amount" jdbcType="INTEGER" property="profitsAmount" />
	    <result column="order_no" jdbcType="VARCHAR" property="orderNo" />
	    <result column="task_id" jdbcType="VARCHAR" property="taskId" />
	    <result column="amount" jdbcType="INTEGER" property="amount" />
	    <result column="user_id" jdbcType="VARCHAR" property="userId" />
	    <result column="account_name" jdbcType="VARCHAR" property="accountName" />
	    <result column="row_crt_ts" jdbcType="TIMESTAMP" property="rowCrtTs" />
	    <result column="src_user_id" jdbcType="VARCHAR" property="srcUserId" />
	    <result column="src_account_name" jdbcType="VARCHAR" property="srcAccountName" />
	    <result column="row_num" jdbcType="VARCHAR" property="rowNum" />
	</resultMap>
	
	<sql id="where_page_pay">
		<where>
			<if test="agentName !=null and agentName !=''">
				and b.agent_name like  concat(concat('%',#{agentName}),'%')
			</if>
			<if test="agentId !=null and agentId!=''">
				and a.agent_id=#{agentId}
			</if>
			<if test="orderNo !=null and orderNo!=''">
				and a.plan_id=#{orderNo}
			</if>
			<if test="taskId !=null and taskId!=''">
				and c.task_id=#{taskId}
			</if>
			<if test="userId !=null and userId !=''">
				and a.profits_user_id=#{userId}
			</if>
			<if test="level != null">
				and b.level = #{level}
			</if>
			<if test="startTime !=null and startTime !=''">
				and a.row_crt_ts &gt;=#{startTime}
			</if>
			<if test="endTime !=null and endTime !=''">
				and a.row_crt_ts &lt;=#{endTime}
			</if>
			and a.profits_num > 3
		</where>
	</sql>
	<sql id="where_page_up">
		<where>
			and a.agent_id !=''
			<if test="agentName !=null and agentName !=''">
				and b.agent_name like  concat(concat('%',#{agentName}),'%')
			</if>
			<if test="agentId !=null and agentId!=''">
				and b.agent_id=#{agentId}
			</if>
			<if test="orderNo !=null and orderNo!=''">
				and a.order_no=#{orderNo}
			</if>
			<if test="taskId !=null and taskId !=''">
				and a.order_no='NO'
			</if>
			<if test="userId !=null and userId !=''">
				and a.profits_user_id=#{userId}
			</if>
			<if test="level != null">
				and b.level = #{level}
			</if>
			<if test="startTime !=null and startTime !=''">
				and a.row_crt_ts &gt;=#{startTime}
			</if>
			<if test="endTime !=null and endTime !=''">
				and a.row_crt_ts &lt;=#{endTime}
			</if>
			and a.profits_num >= 3
		</where>
	</sql>

	<select id="listAgentPayProfits" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultMap="AgentProfitResultMap">
		select a.* from (
			select a.agent_id,a.agent_name,b.level,1 as profits_type,a.amount as profits_amount,c.task_id,
			a.plan_id as order_no,c.plan_amt as amount,a.profits_user_id as user_id,d.account_name,
			a.row_crt_ts,c.user_id as src_user_id,e.account_name as src_account_name from t_pay_profits_detail a 
			left join t_pay_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			left join t_app_user e on c.user_id = e.user_id
			<include refid="where_page_pay"/> order by a.row_crt_ts desc
		)a limit #{startRow} , #{pageSize}
	</select>
	<select id="countAgentPayProfits" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultType="map">
		select count(1) as count,sum(amount) as sumAmount,sum(profits_amount) assumProfitsAmount from (
			select a.agent_id,a.agent_name,b.level,1 as profits_type,a.amount as profits_amount,
			a.plan_id as order_no,c.plan_amt as amount,a.profits_user_id as user_id,d.account_name,
			a.row_crt_ts from t_pay_profits_detail a 
			left join t_pay_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			<include refid="where_page_pay"/> order by a.row_crt_ts desc
		)a
	</select>
	
	<select id="listAgentUpProfits" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultMap="AgentProfitResultMap">
		select a.* from (
			select a.agent_id,a.agent_name,b.level,2 as profits_type,a.amount as profits_amount,'' as task_id,
			a.order_no,c.amount,a.profits_user_id as user_id,d.account_name,a.row_crt_ts 
			,c.user_id as src_user_id,e.account_name as src_account_name
			from t_up_profits_detail a 
			left join t_up_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			left join t_app_user e on c.user_id = e.user_id
			<include refid="where_page_up"/> order by a.row_crt_ts desc
		)a limit #{startRow} , #{pageSize}
	</select>
	<select id="countAgentUpProfits" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultType="map">
		select count(1) as count,sum(amount) as sumAmount,sum(profits_amount) assumProfitsAmount from (
			select a.agent_id,a.agent_name,b.level,2 as profits_type,a.amount as profits_amount,
			a.order_no,c.amount,a.profits_user_id as user_id,d.account_name,a.row_crt_ts 
			from t_up_profits_detail a 
			left join t_up_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			<include refid="where_page_up"/> order by a.row_crt_ts desc
		)a
	</select>
	
	<select id="listAgentProfits" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultMap="AgentProfitResultMap">
		select a.* from (
		  select a.* from(
			select a.agent_id,a.agent_name,b.level,1 as profits_type,a.amount as profits_amount,c.task_id,
			a.plan_id as order_no,c.plan_amt as amount,a.profits_user_id as user_id,d.account_name,
			a.row_crt_ts ,c.user_id as src_user_id,e.account_name as src_account_name from t_pay_profits_detail a 
			left join t_pay_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			left join t_app_user e on c.user_id = e.user_id
			<include refid="where_page_pay"/>
			union all 
			select a.agent_id,a.agent_name,b.level,2 as profits_type,a.amount as profits_amount,'' as task_id,
			a.order_no,c.amount,a.profits_user_id as user_id,d.account_name,a.row_crt_ts ,
			c.user_id as src_user_id,e.account_name as src_account_name
			from t_up_profits_detail a 
			left join t_up_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			left join t_app_user e on c.user_id = e.user_id
			<include refid="where_page_up"/>
			union all 
			select a.agent_id,a.agent_name,b.level,3 as profits_type,a.amount as profits_amount,'' as task_id,
			a.order_no as order_no,c.amt as amount,a.profits_user_id as user_id,d.account_name,
			a.row_crt_ts,c.user_id as src_user_id,e.account_name as src_account_name 
			from t_fast_profits_detail a 
			left join t_fast_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			left join t_app_user e on c.user_id = e.user_id
			<include refid="where_page_fast"/>
		 )a order by a.row_crt_ts desc
		)a limit #{startRow} , #{pageSize}
	</select>
	
	<select id="countAgentProfits" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultType="map">
		select count(1) as count,sum(amount) as sumAmount,sum(profits_amount) assumProfitsAmount from (
			select a.agent_id,a.agent_name,b.level,1 as profits_type,a.amount as profits_amount,
			a.plan_id as order_no,c.plan_amt as amount,a.profits_user_id as user_id,d.account_name,
			a.row_crt_ts from t_pay_profits_detail a 
			left join t_pay_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			<include refid="where_page_pay"/>
			union all 
			select a.agent_id,a.agent_name,b.level,2 as profits_type,a.amount as profits_amount,
			a.order_no,c.amount,a.profits_user_id as user_id,d.account_name,a.row_crt_ts 
			from t_up_profits_detail a 
			left join t_up_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			<include refid="where_page_up"/>
			union all 
			select a.agent_id,a.agent_name,b.level,3 as profits_type,a.amount as profits_amount,
			a.order_no as order_no,c.amt as amount,a.profits_user_id as user_id,d.account_name,
			a.row_crt_ts from t_fast_profits_detail a 
			left join t_fast_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			<include refid="where_page_fast"/>
		)a
	</select>
	<select id="listAgentFastProfits" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultMap="AgentProfitResultMap">
		select a.* from (
			select a.agent_id,a.agent_name,b.level,3 as profits_type,a.amount as profits_amount,'' as task_id,
			a.order_no as order_no,c.amt as amount,a.profits_user_id as user_id,d.account_name,
			a.row_crt_ts,c.user_id as src_user_id,e.account_name as src_account_name from t_fast_profits_detail a 
			left join t_fast_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			left join t_app_user e on c.user_id = e.user_id
			<include refid="where_page_fast"/> order by a.row_crt_ts desc
		)a limit #{startRow} , #{pageSize}
	</select>
	<select id="countAgentFastProfits" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultType="map">
		select count(1) as count,sum(amount) as sumAmount,sum(profits_amount) assumProfitsAmount from (
			select a.agent_id,a.agent_name,b.level,3 as profits_type,a.amount as profits_amount,
			a.order_no as order_no,c.amt as amount,a.profits_user_id as user_id,d.account_name,
			a.row_crt_ts from t_fast_profits_detail a 
			left join t_fast_profits c on a.profits_id = c.profits_id
			left join t_agent_inf b on a.agent_id=b.agent_id
			left join t_app_user d on a.profits_user_id = d.user_id
			<include refid="where_page_fast"/> order by a.row_crt_ts desc
		)a
	</select>
	<sql id="where_page_fast">
		<where>
			and a.agent_id !=''
			<if test="agentName !=null and agentName !=''">
				and b.agent_name like  concat(concat('%',#{agentName}),'%')
			</if>
			<if test="agentId !=null and agentId!=''">
				and b.agent_id=#{agentId}
			</if>
			<if test="orderNo !=null and orderNo!=''">
				and a.order_no=#{orderNo}
			</if>
			<if test="userId !=null and userId !=''">
				and a.profits_user_id=#{userId}
			</if>
			<if test="level != null">
				and b.level = #{level}
			</if>
			<if test="startTime !=null and startTime !=''">
				and a.row_crt_ts &gt;=#{startTime}
			</if>
			<if test="endTime !=null and endTime !=''">
				and a.row_crt_ts &lt;=#{endTime}
			</if>
			and a.profits_num > 3
		</where>
	</sql>
	
	<select id="getAgentProfitsStatisticsCount" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultType="int">
		select count(1) from (select count(1) from(
			select a.agent_id,a.agent_name,sum(a.amount) as profits_amount
				from t_agent_inf b
				left join t_pay_profits_detail a  on a.agent_id=b.agent_id
				left join t_pay_profits c on a.profits_id = c.profits_id
				<include refid="agentProfitsStatistics_where"/>
	      		GROUP BY a.agent_id,a.agent_name
				union all 
				select a.agent_id,a.agent_name,sum(a.amount) as profits_amount 
				from  t_agent_inf b
				left join t_up_profits_detail a  on a.agent_id=b.agent_id
				left join t_up_profits c on a.profits_id = c.profits_id
				<include refid="agentProfitsStatistics_where"/>
	      		GROUP BY a.agent_id,a.agent_name
				union all 
				select a.agent_id,a.agent_name,sum(a.amount) as profits_amount
				from  t_agent_inf b 
				left join t_fast_profits_detail a on a.agent_id=b.agent_id
				left join t_fast_profits c on a.profits_id = c.profits_id
				<include refid="agentProfitsStatistics_where"/>
	     		GROUP BY a.agent_id,a.agent_name
			 )a group by a.agent_id,a.agent_name
		)b
	</select>
	<select id="getAgentProfitsStatisticsByPage" parameterType="net.chrone.creditpay.model.AgentProfitVO" resultMap="AgentProfitResultMap">
	select * from (
		select @r:=@r+1 as row_num ,b.* from (select a.agent_id,a.agent_name,sum(a.profits_amount) as profits_amount from(
				select a.agent_id,a.agent_name,sum(a.amount) as profits_amount
					from t_agent_inf b
					left join t_pay_profits_detail a  on a.agent_id=b.agent_id
					left join t_pay_profits c on a.profits_id = c.profits_id
					<include refid="agentProfitsStatistics_where"/>
		      		GROUP BY a.agent_id,a.agent_name
					union all 
					select a.agent_id,a.agent_name,sum(a.amount) as profits_amount 
					from  t_agent_inf b
					left join t_up_profits_detail a  on a.agent_id=b.agent_id
					left join t_up_profits c on a.profits_id = c.profits_id
					<include refid="agentProfitsStatistics_where"/>
		      		GROUP BY a.agent_id,a.agent_name
					union all 
					select a.agent_id,a.agent_name,sum(a.amount) as profits_amount
					from  t_agent_inf b 
					left join t_fast_profits_detail a on a.agent_id=b.agent_id
					left join t_fast_profits c on a.profits_id = c.profits_id
					<include refid="agentProfitsStatistics_where"/>
		      		GROUP BY a.agent_id,a.agent_name
				 )a group by a.agent_id,a.agent_name ORDER BY profits_amount desc
		) b ,(select @r:=0) r ) c limit #{startRow} , #{pageSize}
	</select>
	<sql id="agentProfitsStatistics_where">
	<where>
	    and a.agent_id!='' 
		<if test="startDate !=null and startDate !='' ">
		and a.profits_dt &gt;=#{startDate}
		</if>
		<if test="endDate !=null and endDate !='' ">
		and a.profits_dt &lt;=#{endDate}
		</if>
		<if test="agentId !=null and agentId !='' ">
		and b.agent_id =#{agentId}
		</if>
		</where>
	</sql>
</mapper>